// SPDX-License-Identifier: MIT
// This is an experimental version, please refer to the paper for specific implementation: Refiner: a reliable and efficient incentive-driven federated learning system powered by


pragma solidity ^0.8.0;

import "./FeeManagement.sol";
import "./TaskManagement.sol";

contract CrossConsensus {

    FeeManagement public feeManagement;
    TaskManagement public taskManagement;

    event MostFrequentHash(string hash, string cid, address[] addresses);

    struct HashInfo {
        uint256 count;
        string cid;
        address[] addresses;
    }
	
    mapping(string => HashInfo) public hashCount;

    constructor(address _feeManagementAddress, address _taskManagementAddress) {
        feeManagement = FeeManagement(_feeManagementAddress);
        taskManagement = TaskManagement(_taskManagementAddress);
    }
	

    function submitConsensus(string[] memory hashes, string[] memory cids, address[] memory addresses) public {

        
        // Count the hashes and store corresponding CIDs and addresses
        //Assuming that each hash value corresponds to a CID and three addresses.
        for (uint256 i = 0; i < hashes.length; i++) {
            hashCount[hashes[i]].count++;
            hashCount[hashes[i]].cid = cids[i];
            hashCount[hashes[i]].addresses = new address[](3);
            for (uint256 j = 0; j < 3; j++) {
                hashCount[hashes[i]].addresses[j] = addresses[i * 3 + j];
            }
        }

        // Determine the most frequent hash
        string memory mostFrequentHash = hashes[0];
        uint256 maxCount = 0;

        for (uint256 i = 0; i < hashes.length; i++) {
            if (hashCount[hashes[i]].count > maxCount) {
                mostFrequentHash = hashes[i];
                maxCount = hashCount[hashes[i]].count;
            }
        }
    
        emit MostFrequentHash(mostFrequentHash, hashCount[mostFrequentHash].cid, hashCount[mostFrequentHash].addresses);
        feeManagement.distributeFees(hashCount[mostFrequentHash].addresses);
        taskManagement.nextround(mostFrequentHash, hashCount[mostFrequentHash].cid);

    }
}
