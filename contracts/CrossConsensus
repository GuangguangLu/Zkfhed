// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./FeeManagement.sol";
import "./TaskManagement.sol";

contract CrossConsensus {

    FeeManagement public feeManagement;
    TaskManagement public taskManagement;

    struct HashEntry {
        uint count;
    }

    mapping(string => HashEntry) public hashEntries;
    string[] public hashes;

    constructor(address _feeManagementAddress, address _taskManagementAddress) {
        feeManagement = FeeManagement(_feeManagementAddress);
        taskManagement = TaskManagement(_taskManagementAddress);
    }

    function submitConsensus(string memory _hash, string memory _CID, address[] memory _addresses) public {

        hashEntries[_hash].count += 1;

        string memory selectedHash;
        uint maxCount = 0;

        for (uint i = 0; i < hashes.length; i++) {
            string memory currentHash = hashes[i];
            if (hashEntries[currentHash].count > maxCount) {
                maxCount = hashEntries[currentHash].count;
                selectedHash = currentHash;
            }
        }

        feeManagement.distributeFees(_addresses);
        taskManagement.nextround(selectedHash, _CID);

    }
}
